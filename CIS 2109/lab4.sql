--- Question 1 ---
CREATE TABLE EMPLOYEE_STATISTICS (
    EMPLOYEE_ID NUMBER(11, 0) NOT NULL,
    EMPLOYEE_NAME VARCHAR2(25) NOT NULL,
    CURRENT_DEPARTMENT_ID NUMBER(11, 0),
    NUMBER_OF_PREVIOUS_POSITIONS INT,
    NUMBER_OF_PREVIOUS_DEPARTMENTS INT,
    CONSTRAINT EMPLOYEE_STATISTICS_PK PRIMARY KEY(EMPLOYEE_ID),
    CONSTRAINT EMPLOYEE_STATISTICS_FK FOREIGN KEY(EMPLOYEE_ID) REFERENCES HR_EMPLOYEES(EMPLOYEE_ID)
);

COMMIT;

-- Question 2 ---
SELECT
    E.EMPLOYEE_ID,
    CONCAT(E.FIRST_NAME, CONCAT(' ', E.LAST_NAME)) AS EMPLOYEE_NAME,
    E.DEPARTMENT_ID                                AS CURRENT_DEPARTMENT_ID,
    COUNT(DISTINCT(J.JOB_ID))                      AS NUMBER_OF_PREVIOUS_POSITIONS,
    COUNT(DISTINCT(D.DEPARTMENT_ID))               AS NUMBER_OF_PREVIOUS_DEPARTMENTS
FROM
    HR_EMPLOYEES   E
    LEFT JOIN HR_JOB_HISTORY J
    ON E.EMPLOYEE_ID = J.EMPLOYEE_ID
    LEFT JOIN HR_DEPARTMENTS D
    ON J.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE
    E.DEPARTMENT_ID IS NOT NULL
GROUP BY
    E.EMPLOYEE_ID,
    E.FIRST_NAME,
    E.LAST_NAME,
    E.DEPARTMENT_ID
ORDER BY
    NUMBER_OF_PREVIOUS_DEPARTMENTS DESC;

--- Question 3 ---
INSERT INTO EMPLOYEE_STATISTICS (
    EMPLOYEE_ID,
    EMPLOYEE_NAME,
    CURRENT_DEPARTMENT_ID,
    NUMBER_OF_PREVIOUS_POSITIONS,
    NUMBER_OF_PREVIOUS_DEPARTMENTS
)
    SELECT
        E.EMPLOYEE_ID,
        CONCAT(E.FIRST_NAME, CONCAT(' ', E.LAST_NAME)) AS EMPLOYEE_NAME,
        NVL(E.DEPARTMENT_ID, 0)                        AS CURRENT_DEPARTMENT_ID,
        COUNT(DISTINCT(J.JOB_ID))                      AS NUMBER_OF_PREVIOUS_POSITIONS,
        COUNT(DISTINCT(D.DEPARTMENT_ID))               AS NUMBER_OF_PREVIOUS_DEPARTMENTS
    FROM
        HR_EMPLOYEES   E
        LEFT JOIN HR_JOB_HISTORY J
        ON E.EMPLOYEE_ID = J.EMPLOYEE_ID
        LEFT JOIN HR_DEPARTMENTS D
        ON J.DEPARTMENT_ID = D.DEPARTMENT_ID
    GROUP BY
        E.EMPLOYEE_ID,
        E.FIRST_NAME,
        E.LAST_NAME,
        E.DEPARTMENT_ID
    ORDER BY
        NUMBER_OF_PREVIOUS_DEPARTMENTS DESC;

COMMIT;

--- Question 4 ---
ALTER TABLE EMPLOYEE_STATISTICS ADD EMPLOYEE_INDEX VARCHAR2(20);

--- Question 5 ---
UPDATE EMPLOYEE_STATISTICS
SET
    EMPLOYEE_INDEX = 'Senior'
WHERE
    NUMBER_OF_PREVIOUS_POSITIONS > 2;

UPDATE EMPLOYEE_STATISTICS
SET
    EMPLOYEE_INDEX = 'Junior'
WHERE
    NUMBER_OF_PREVIOUS_POSITIONS = 2;

UPDATE EMPLOYEE_STATISTICS
SET
    EMPLOYEE_INDEX = 'New Hire'
WHERE
    NUMBER_OF_PREVIOUS_POSITIONS <= 1;

COMMIT;

--- Question 6 ---
DELETE FROM EMPLOYEE_STATISTICS
WHERE
    CURRENT_DEPARTMENT_ID = 30;

COMMIT;

--- Question 7 ---
ALTER TABLE EMPLOYEE_STATISTICS MODIFY NUMBER_OF_PREVIOUS_POSITIONS INT NOT NULL;

--- Question 8 ---
ALTER TABLE EMPLOYEE_STATISTICS MODIFY NUMBER_OF_PREVIOUS_DEPARTMENTS DEFAULT 0;

--- Question 9a ---
UPDATE EMPLOYEE_STATISTICS
SET
    CURRENT_DEPARTMENT_ID = 30
WHERE
    EMPLOYEE_ID = 102;

COMMIT;

--- Question 9b ---
UPDATE EMPLOYEE_STATISTICS
SET
    EMPLOYEE_INDEX = 'Command designed to make the point';

--- Question 9c ---
UPDATE EMPLOYEE_STATISTICS
SET
    EMPLOYEE_NAME = 'Papa Bear'
WHERE
    EMPLOYEE_ID < 120;

COMMIT;

ROLLBACK;

--- Question 10 ---
ALTER TABLE EMPLOYEE_STATISTICS DROP CONSTRAINT EMPLOYEE_STATISTICS_FK CASCADE;

--- Question 11 ---
INSERT INTO EMPLOYEE_STATISTICS (
    EMPLOYEE_ID,
    EMPLOYEE_NAME,
    CURRENT_DEPARTMENT_ID,
    NUMBER_OF_PREVIOUS_POSITIONS
) VALUES(
    300,
    'Geralt-Of-Rivia',
    567,
    0
);

COMMIT;

--- Question 12 ---
SELECT
    EMPLOYEE_ID,
    EMPLOYEE_NAME,
    CURRENT_DEPARTMENT_ID
FROM
    EMPLOYEE_STATISTICS ST;

MERGE INTO EMPLOYEE_STATISTICS ST
 USING(
    SELECT
                                            EMPLOYEE_ID,
                                     FIRST_NAME,
                                      LAST_NAME,
                             DEPARTMENT_ID
    FROM
                                                                                                                                                                               HR_EMPLOYEES
) E ON (ST.EMPLOYEE_ID = E.EMPLOYEE_ID)
WHEN MATCHED THEN
    UPDATE
        SET ST.EMPLOYEE_NAME = E.FIRST_NAME
|| ' '
|| E.LAST_NAME,
ST.CURRENT_DEPARTMENT_ID = E.EMPLOYEE_ID
WHEN NOT MATCHED THEN
    INSERT (ST.EMPLOYEE_ID, ST.EMPLOYEE_NAME, ST.CURRENT_DEPARTMENT_ID, ST.NUMBER_OF_PREVIOUS_POSITIONS)
    VALUES(E.EMPLOYEE_ID, E.FIRST_NAME
|| ' '
|| E.LAST_NAME, E.DEPARTMENT_ID, 0);

COMMIT;

--- Question 13 ---
TRUNCATE TABLE EMPLOYEE_STATISTICS;

COMMIT;

--- Question 14 ---
DROP TABLE EMPLOYEE_STATISTICS;

COMMIT;